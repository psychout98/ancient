import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class Main extends JFrame implements ActionListener {
	static int t1 = 0, t2 = 1, Players = 1,
			Stat[][][] = new int[2][Players][14],
			pStat[][][][] = new int[2][Players][14][10], MainTeam = 0,
			PlayedTeam = 1, Game[][][] = new int[2][2][10];
	static String Player[][] = new String[2][Players];
	static JTextField Team1 = new JTextField("Team 1"), Team2 = new JTextField(
			"Team 2"),GameScore[][][]=new JTextField[2][2][10];
	static JLabel Title[] = { new JLabel("Players (Ranked)"), new JLabel("Result"),
			new JLabel("Odds"), new JLabel(/* Winner */), new JLabel(/*
																	 * avg final
																	 * odds
																	 */),
			new JLabel("Players (Ranked)") },vs[][] = new JLabel[2][10];
	static JButton Team1Progression = new JButton("Calculate Progression"),
			Team2Progression = new JButton("Calculate Progression"),
			Team1PlayerAdd = new JButton("Add Player"),
			Team2PlayerAdd = new JButton("Add Player");

	Main() {
		super("Match Predictor");
		JPanel Team1Players = new JPanel(new GridLayout(30, 1)), Team2Players = new JPanel(
				new GridLayout(30, 1)), Team1Stats = new JPanel(new GridLayout(
				30, 2)), Team2Stats = new JPanel(new GridLayout(30, 2)), Results = new JPanel(
				new GridLayout(30, 1)), Odds = new JPanel(new GridLayout(30, 1)),game[][]=new JPanel[2][10];
		for(int i=0;i<2;i++)
			for(int j=0;j<2;j++)
				for(int k=0;k<10;k++){
					GameScore[i][j][k]= new JTextField();
					game[i][k]=new JPanel(new GridLayout(1,3));
					vs[i][k]=new JLabel("   vs.");
				}
		Team1Players.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		Team1Players.add(Title[5]);
		Team1Players.add(Team1PlayerAdd);
		Team1PlayerAdd.addActionListener(this);
		Team2Players.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		Team2Players.add(Title[0]);
		Team2Players.add(Team2PlayerAdd);
		Team2PlayerAdd.addActionListener(this);
		Team1Stats.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		Team1Stats.add(Team1);
		for(int i=0;i<10;i++){
			for(int j=0;j<2;j++){
					game[0][i].add(GameScore[0][j][i]);
					if(j==0)
						game[0][i].add(vs[0][i]);
			}
		}
		for(int i=0;i<10;i++)
		Team1Stats.add(game[0][i]);
		Team1Stats.add(Team1Progression);
		Team1Progression.addActionListener(this);
		Team2Stats.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		Team2Stats.add(Team2);
		Team2Stats.add(Team2Progression);
		Team2Progression.addActionListener(this);
		Results.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		Results.add(Title[1]);
		Odds.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		Odds.add(Title[2]);
		this.setLayout(new GridLayout(1, 6));
		this.add(Team1Players);
		this.add(Team1Stats);
		this.add(Results);
		this.add(Odds);
		this.add(Team2Stats);
		this.add(Team2Players);
		this.setSize(1000, 700);
		this.setVisible(true);
	}

	public static void main(String[] args) {
		Main window = new Main();
		window.setDefaultCloseOperation(3);
				
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		if(arg0.getSource()==Team1PlayerAdd)
			Team1AddPlayer();
		if(arg0.getSource()==Team2PlayerAdd)
			Team2AddPlayer();
		if(arg0.getSource()==Team1Progression)
			Team1CalculateProgression();
		if(arg0.getSource()==Team2Progression)
			Team2CalculateProgression();
	}
	public void Team1AddPlayer(){
		
	}
	public void Team2AddPlayer(){
		
	}
	public void Team1CalculateProgression(){
		
	}
	public void Team2CalculateProgression(){
		
	}

}
